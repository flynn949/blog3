curves_c %>%
filter(mutant %in% mutants_to_compare) %>%
ggplot()+
aes(x = conc, y = prob, group = interaction(mutant, draw), colour = mutant)+
geom_line(alpha = 0.3)+
scale_colour_manual(values = c("red", "purple", "blue", "darkorange"))+
labs(title = "Fitted curves for mutants A, E and F: 200 posterior draws", x = "conc", y = "Probability of success")+
theme(legend.position = "bottom")
n_draws <- 200
draws <- paste0("draw_", 1:n_draws)
list_of_draws <- extract(fit, pars = c("centre", "height", "width"))
centrevals <- as.data.frame(list_of_draws$centre[1:n_draws,])
colnames(centrevals) <- mutants
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(kableExtra)
library(rstan)
set.seed(5646)
gaussian <- function(height,centre,width,x){
return(height * exp(-0.5* ( ((x - centre)^2)/(width^2)) ))
}
invlogit <- function(x){exp(x)/(1+exp(x))}
exampleconc <- seq(60,80,by = 1)
exampleresp_prob <- gaussian(0.5, 70, 1.5, exampleconc)
n_trials <- rbinom(length(exampleconc), size = 16, prob = 0.8)
exampleresp_resp <- rbinom(length(exampleconc), n_trials, prob = exampleresp_prob)
n_trials2 <- rbinom(length(exampleconc), size = 16, prob = 0.8)
exampleresp_prob2 <- gaussian(0.4, 65, 1.5, exampleconc)
exampleresp_resp2 <- rbinom(length(exampleconc), n_trials2, prob = exampleresp_prob2)
n_trials3 <- rbinom(length(exampleconc), size = 16, prob = 0.8)
exampleresp_prob3 <- gaussian(0.8, 73, 1.4, exampleconc)
exampleresp_resp3 <- rbinom(length(exampleconc), n_trials3, prob = exampleresp_prob3)
n_trials4 <- rbinom(length(exampleconc), size = 16, prob = 0.8)
exampleresp_prob4 <- gaussian(0.6, 74, 1.6, exampleconc)
exampleresp_resp4 <- rbinom(length(exampleconc), n_trials4, prob = exampleresp_prob4)
par( mfrow = c(2,2))
plot(exampleconc, exampleresp_resp, xlab = "Concentration", ylab = "Successes", main = "Mutant A")
plot(exampleconc, exampleresp_resp2, xlab = "Concentration", ylab = "Successes", main = "Mutant B")
plot(exampleconc, exampleresp_resp3, xlab = "Concentration", ylab = "Successes", main = "Mutant C")
plot(exampleconc, exampleresp_resp4, xlab = "Concentration", ylab = "Successes", main = "Mutant D")
n_mutants <- 6
mutants <- LETTERS[1:n_mutants]  #Give each mutant a name.
# Population-level intercepts
pop_height_logodds <- 0
pop_centre <- 70
pop_width <- 1.5
# Group level standard deviations (differences between mutants)
group_sd_height_logodds <- 1
group_sd_centre <- 4
group_sd_width <- 0.3
#invlogit function for converting log odds to probability
invlogit <- function(x){exp(x)/(1+exp(x))}
#set height seed for reproducibility
set.seed(100)
mutant_height_logodds <- rnorm(n = n_mutants, mean = pop_height_logodds, sd = group_sd_height_logodds)
mutant_centre <- rnorm(n = n_mutants, mean = pop_centre, sd = group_sd_centre)
mutant_width <- exp(rnorm(n = n_mutants, mean = log(pop_width), sd = group_sd_width))
# Transform these parameters from log-odds to probability
mutant_height_p <- invlogit(mutant_height_logodds)
# Data summary
mutant.frame <- data.frame("mutant" = mutants, "height_logodds" = mutant_height_logodds,   "height_p" = mutant_height_p,"centre" = mutant_centre, "width" = mutant_width)
kable(mutant.frame, format = "html", digits = 1)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
# Predictor variable
conc_range <- 10
conc_interval <- 1
conc <- seq(pop_centre-conc_range, pop_centre + conc_range, conc_interval)
trim = TRUE
# Maximum number of repeats/trials
max_trials = 10
#Probability of max trials
prob_trials = 0.95 #A high value to simulate a situation where there is an intended number of trials, but some have failed for technical reasons.
gaussian <- function(height,centre,width,x){
return(height * exp(-0.5* ( ((x - centre)^2)/(width^2)) ))
}
probability.matrix <- matrix(data = NA, nrow = length(conc), ncol = n_mutants)
for (j in 1:n_mutants){
for (i in 1:length(conc)){
probability.matrix[i,j] <- gaussian(mutant_height_p[j], mutant_centre[j], mutant_width[j], conc[i])
}
}
n_trials.matrix <- matrix(data = rbinom(n = length(conc)*n_mutants, size = max_trials, prob = prob_trials),  nrow = length(conc), ncol = n_mutants)
# Simulate experiments - get the number of successes given the probability from the above matrix and the number of trials.
successes.matrix <- matrix(data = NA, nrow = length(conc), ncol = n_mutants)
for (j in 1:n_mutants){
for (i in 1:length(conc)){
successes.matrix[i,j] <- rbinom(1, prob =  probability.matrix[i,j], size = n_trials.matrix[i,j])
}
}
# Bring all the data together
n_trials.frame <- as.data.frame(n_trials.matrix)
colnames(n_trials.frame) <- mutants
n_trials.frame$conc <- conc
n_trials.frame.gathered <- gather(n_trials.frame, mutant, n_trials, -conc)
prob.frame <- as.data.frame(probability.matrix)
colnames(prob.frame) <- mutants
prob.frame$conc <- conc
prob.frame.gathered <- gather(prob.frame, mutant, probability, -conc)
successes.frame <- as.data.frame(successes.matrix)
colnames(successes.frame) <- mutants
successes.frame$conc <- conc
# Tidy format and combine
successes.frame.gathered <- gather(successes.frame, mutant, successes, -conc) %>%
left_join(n_trials.frame.gathered) %>%
left_join(prob.frame.gathered) %>%
left_join(mutant.frame)
if (trim == TRUE){
#Trim away the zero readings.
successes.frame.gathered <- successes.frame.gathered %>%
filter(conc > centre - 4*width & conc < centre + 4*width)
}
# Plot
ggplot(successes.frame.gathered)+
aes(x = conc, y = successes/n_trials, group = mutant)+
geom_vline(data = mutant.frame, aes(xintercept = centre), linetype = "dashed")+
geom_line(aes(y = n_trials/max_trials), linetype = "dashed", colour = "grey")+
geom_line(aes(y = probability), colour = "blue")+
geom_point(size = 1)+
theme_bw(14)+
facet_wrap(~mutant,ncol=2)+
labs(caption = "Dashed line represents number of trials as fraction of maximum trials.\nVertical line shows the true centre.\nBlue line shows the true probability.")
mlist <- data.frame("mutant" = mutants, mutant_num = seq(1:n_mutants))
successes.frame.gathered <- successes.frame.gathered %>% left_join(mlist)
dat_allmutants = list(
J = n_mutants,
N = nrow(successes.frame.gathered),
mutant = successes.frame.gathered$mutant_num,
x = successes.frame.gathered$conc,
n_trials = successes.frame.gathered$n_trials,
y = successes.frame.gathered$successes
)
stan_allmutants <- "
data {
int<lower=1> J; //number of mutants
int<lower=1> N; //Number of observations
int<lower=1,upper=J> mutant[N]; //mutant for observation n
vector[N] x; //concentration for observation n
int<lower=0> n_trials[N]; //number of trials for observation n
int<lower=0> y[N]; //Number of survivors for observation n
}
parameters {
real mu_centre;
real<lower=0> sigma_centre;
vector[J] centre_raw;
real mu_heightlogodds;
real<lower=0> sigma_heightlogodds;
vector[J] heightlogodds_raw;
real<lower=0> mu_width_squared;
real<lower=0> sigma_width_squared;
vector[J] width_raw_squared;
}
transformed parameters {
vector[J] height;
vector[J] centre;
vector[J] heightlogodds;
vector<lower=0>[J] width_squared;
centre = mu_centre + sigma_centre*centre_raw;
heightlogodds = mu_heightlogodds + sigma_heightlogodds * heightlogodds_raw;
height = inv_logit(heightlogodds);
width_squared = mu_width_squared + sigma_width_squared * width_raw_squared;
}
model {
vector[N] psurvive;
for (n in 1:N)
psurvive[n] = height[mutant[n]] * exp( -0.5* ( ((x[n] - centre[mutant[n]])^2) / (width_squared[mutant[n]]) ) );
mu_centre ~ normal(65,20);
sigma_centre ~ cauchy(0,2);
centre_raw ~ normal(0,1);
mu_heightlogodds ~ normal(0.5,2);
sigma_heightlogodds ~ cauchy(0,2);
heightlogodds_raw ~ normal(0,1);
mu_width_squared ~ cauchy(0,5);
sigma_width_squared ~ cauchy(0,3);
width_raw_squared ~ normal(0,1);
y ~ binomial(n_trials, psurvive);
} generated quantities {
vector[J] width;
width = sqrt(width_squared);
}
"
fit <- stan(model_code = stan_allmutants,
model_name = "example",
data = dat_allmutants,
iter = 2000, warmup = 1000, chains = 4, cores = 4, sample_file = 'multi_mutants.csv',
verbose = FALSE)
plot(fit, pars = "centre")
vector<lower=0>[J] width;
stan_allmutants <- "
data {
int<lower=1> J; //number of mutants
int<lower=1> N; //Number of observations
int<lower=1,upper=J> mutant[N]; //mutant for observation n
vector[N] x; //concentration for observation n
int<lower=0> n_trials[N]; //number of trials for observation n
int<lower=0> y[N]; //Number of survivors for observation n
}
parameters {
real mu_centre;
real<lower=0> sigma_centre;
vector[J] centre_raw;
real mu_heightlogodds;
real<lower=0> sigma_heightlogodds;
vector[J] heightlogodds_raw;
real<lower=0> mu_width_squared;
real<lower=0> sigma_width_squared;
vector[J] width_raw_squared;
}
transformed parameters {
vector[J] height;
vector[J] centre;
vector[J] heightlogodds;
vector<lower=0>[J] width_squared;
centre = mu_centre + sigma_centre*centre_raw;
heightlogodds = mu_heightlogodds + sigma_heightlogodds * heightlogodds_raw;
height = inv_logit(heightlogodds);
width_squared = mu_width_squared + sigma_width_squared * width_raw_squared;
}
model {
vector[N] psurvive;
for (n in 1:N)
psurvive[n] = height[mutant[n]] * exp( -0.5* ( ((x[n] - centre[mutant[n]])^2) / (width_squared[mutant[n]]) ) );
mu_centre ~ normal(65,20);
sigma_centre ~ cauchy(0,2);
centre_raw ~ normal(0,1);
mu_heightlogodds ~ normal(0.5,2);
sigma_heightlogodds ~ cauchy(0,2);
heightlogodds_raw ~ normal(0,1);
mu_width_squared ~ cauchy(0,5);
sigma_width_squared ~ cauchy(0,3);
width_raw_squared ~ normal(0,1);
y ~ binomial(n_trials, psurvive);
} generated quantities {
vector<lower=0>[J] width;
width = sqrt(width_squared);
}
"
fit <- stan(model_code = stan_allmutants,
model_name = "example",
data = dat_allmutants,
iter = 2000, warmup = 1000, chains = 4, cores = 4, sample_file = 'multi_mutants.csv',
verbose = FALSE)
centre_a.all <- list_of_draws$centre[,1]
n_draws <- 200
draws <- paste0("draw_", 1:n_draws)
list_of_draws <- extract(fit, pars = c("centre", "height", "width"))
centrevals <- as.data.frame(list_of_draws$centre[1:n_draws,])
colnames(centrevals) <- mutants
widthvals <- as.data.frame(list_of_draws$width[1:n_draws,])
colnames(widthvals) <- mutants
heightvals <- as.data.frame(list_of_draws$height[1:n_draws,])
colnames(heightvals) <- mutants
conc_detailed <- seq(60,80,0.1)
#Create a 3D array of draw-mutant-concentration, filled with the probability of success.
curves <- array(NA, dim=c(n_draws, n_mutants, length(conc_detailed)), dimnames = list(draws, mutants, conc_detailed))
for (i in 1:n_draws){
for (j in 1:n_mutants){
for (k in 1:length(conc_detailed)){
curves[i,j,k] <- gaussian(height = heightvals[i,j], centre = centrevals[i,j], width = widthvals[i,j], x = conc_detailed[k])
}
}
}
#Turn the array into a data frame in tidy format - the fastest way is to use the melt function from reshape2 (unfortunately tidyr's 'gather' does not work on arrays)
library(reshape2)
curves_c <- melt(curves)
detach(package:reshape2)
colnames(curves_c) <- c("draw", "mutant", "conc", "prob")
draws_to_plot <- 12
centrepositions <- centrevals[1:draws_to_plot,] %>%
mutate(draw = draws[1:draws_to_plot]) %>%
gather(mutant, centre,-draw)
mutants_to_compare <- c("A", "C")
curves_c %>%
filter(mutant %in% mutants_to_compare) %>%
filter(draw %in% draws[1:draws_to_plot]) %>%
ggplot()+
aes(x = conc, y = prob, group = mutant, colour = mutant)+
geom_line()+
geom_vline(data = centrepositions %>% filter(mutant %in% mutants_to_compare), aes(xintercept = centre, colour = mutant))+
facet_wrap(~draw)+
scale_colour_manual(values = c("blue", "darkorange"))+
labs(title = "Fitted curves for mutants A and C: 12 posterior draws",x = "conc", y = "Probability of success")+
theme(legend.position = "bottom")
curves_c %>%
filter(mutant %in% mutants_to_compare) %>%
ggplot()+
aes(x = conc, y = prob, group = interaction(mutant, draw), colour = mutant)+
geom_line(alpha = 0.3)+
scale_colour_manual(values = c("blue", "darkorange"))+
labs(title = "Fitted curves for mutants A and C: 200 posterior draws", x = "conc", y = "Probability of success")+
theme(legend.position = "bottom")
centre_a.all <- list_of_draws$centre[,1]
centre_c.all <- list_of_draws$centre[,3]
sum(centre_a.all < centre_c.all)/length(centre_a.all)
centre_a.all <- list_of_draws$centre[,1]
centre_c.all <- list_of_draws$centre[,3]
sum(centre_a.all > centre_c.all)/length(centre_a.all)
fPaste <- function(vec) sub(",\\s+([^,]+)$", " and \\1", toString(vec)) #A function from stack exchange
fPaste(mutants_to_compare)
compare_mutants_plot <- function(mutantlist, curvedata = curves_c, centrepos = centrepositions){
outplot <- curvedata %>%
filter(mutant %in% mutantlist) %>%
filter(draw %in% draws[1:draws_to_plot]) %>%
ggplot()+
aes(x = conc, y = prob, group = mutant, colour = mutant)+
geom_line()+
geom_vline(data = centrepos %>% filter(mutant %in% mutantlist), aes(xintercept = centre, colour = mutant))+
facet_wrap(~draw)+
scale_colour_manual(values = c("blue", "darkorange"))+
labs(title = paste0("Fitted curves for mutants ", fPaste(mutantlist, ": 12 posterior draws")),x = "conc", y = "Probability of success")+
theme(legend.position = "bottom")
return(outplot)
}
mutants_to_compare <- c("A", "C")
compare_mutants_plot(mutants_to_compare)
compare_mutants_plot <- function(mutantlist, curvedata = curves_c, centrepos = centrepositions){
outplot <- curvedata %>%
filter(mutant %in% mutantlist) %>%
filter(draw %in% draws[1:draws_to_plot]) %>%
ggplot()+
aes(x = conc, y = prob, group = mutant, colour = mutant)+
geom_line()+
geom_vline(data = centrepos %>% filter(mutant %in% mutantlist), aes(xintercept = centre, colour = mutant))+
facet_wrap(~draw)+
scale_colour_manual(values = c("blue", "darkorange"))+
labs(title = paste0("Fitted curves for mutants ", fPaste(mutantlist), ": 12 posterior draws"),x = "conc", y = "Probability of success")+
theme(legend.position = "bottom")
return(outplot)
}
mutants_to_compare <- c("A", "C")
compare_mutants_plot(mutants_to_compare)
compare_mutants_plot(c("A", "C"))
compare_mutants_plot <- function(mutantlist, draws_to_plot=12, centre_draws = centrevals, curvedata = curves_c){
centrepositions <- centre_draws[1:draws_to_plot,] %>%
mutate(draw = draws[1:draws_to_plot]) %>%
gather(mutant, centre,-draw)
outplot <- curvedata %>%
filter(mutant %in% mutantlist) %>%
filter(draw %in% draws[1:draws_to_plot]) %>%
ggplot()+
aes(x = conc, y = prob, group = mutant, colour = mutant)+
geom_line()+
geom_vline(data = centrepositions %>% filter(mutant %in% mutantlist), aes(xintercept = centre, colour = mutant))+
facet_wrap(~draw)+
scale_colour_manual(values = c("blue", "darkorange"))+
labs(title = paste0("Fitted curves for mutants ", fPaste(mutantlist), ": 12 posterior draws"),x = "conc", y = "Probability of success")+
theme(legend.position = "bottom")
return(outplot)
}
compare_mutants_plot(c("A", "C"))
compare_mutants_plot <- function(mutantlist, draws_to_plot=12, centre_draws = centrevals, curvedata = curves_c){
centrepositions <- centre_draws[1:draws_to_plot,] %>%
mutate(draw = draws[1:draws_to_plot]) %>%
gather(mutant, centre,-draw)
outplot <- curvedata %>%
filter(mutant %in% mutantlist) %>%
filter(draw %in% draws[1:draws_to_plot]) %>%
ggplot()+
aes(x = conc, y = prob, group = mutant, colour = mutant)+
geom_line()+
geom_vline(data = centrepositions %>% filter(mutant %in% mutantlist), aes(xintercept = centre, colour = mutant))+
facet_wrap(~draw)+
scale_colour_manual(values = c("blue", "darkorange"))+
labs(title = paste0("Fitted curves for mutants ", fPaste(mutantlist), ": ", draws_to_plot, " posterior draws"),x = "conc", y = "Probability of success")+
theme(legend.position = "bottom")
return(outplot)
}
compare_mutants_plot(c("A", "C"))
compare_mutants_plot(c("A", "C"), 10)
compare_mutants_plot(c("A", "C"), 12)
compare_mutants_plot(c("E", "F"), 12)
overlay_mutants_plot <- function(mutantlist, draws_to_plot=200, curvedata = curves_c){
outplot <- curvedata %>%
filter(mutant %in% mutantlist) %>%
ggplot()+
aes(x = conc, y = prob, group = interaction(mutant, draw), colour = mutant)+
geom_line(alpha = 0.3)+
scale_colour_manual(values = c("blue", "darkorange"))+
labs(title = paste0("Fitted curves for mutants ", fPaste(mutantlist), ": ", draws_to_plot, " posterior draws"), x = "conc", y = "Probability of success")+
theme(legend.position = "bottom")
return(outplot)
}
overlay_mutants_plot(c("A", "C"))
compare_mutants_plot(c("E", "F"), 12)
overlay_mutants_plot(c("E", "F"))
library(shinystan)
launch_shinystan(fit)
fit <- stan(model_code = "mutant_model.stan",
model_name = "example",
data = dat_allmutants,
iter = 2000, warmup = 1000, chains = 4, cores = 4, sample_file = 'multi_mutants.csv',
verbose = FALSE)
fit <- stan(model_code = "mutant_model.stan",
model_name = "example",
data = dat_allmutants,
iter = 2000, warmup = 1000, chains = 4, cores = 4, sample_file = 'multi_mutants.csv',
verbose = FALSE)
fit <- stan(model_code = "mutant_model.stan",
model_name = "example",
data = dat_allmutants,
iter = 2000, warmup = 1000, chains = 4, cores = 4, sample_file = 'multi_mutants.csv',
verbose = FALSE)
fit <- stan(model_code = "mutant_model.stan",
model_name = "example",
data = dat_allmutants,
iter = 2000, warmup = 1000, chains = 4, cores = 4, sample_file = 'multi_mutants.csv',
verbose = FALSE)
getwd()
fit <- stan(model_code = "mutant_model.stan",
model_name = "example",
data = dat_allmutants,
iter = 2000, warmup = 1000, chains = 4, cores = 4, sample_file = 'multi_mutants.csv',
verbose = FALSE)
mean(centre_a.all - centre_c.all)
round(sd(centre_a.all - centre_c.all),2)
round(mean(centre_a.all - centre_c.all),2)
round(sd(centre_a.all - centre_c.all),2)
min(centre_a.all - centre_c.all)
max(centre_a.all - centre_c.all)
data.frame("difference" = centre_a.all - centre_c.all) %>%
ggplot()+
aes(x = difference)+
geom_density()
match("A", mutants)
mutants[match("A", mutants)]
difference_plot <- function(first_mutant = "A", second_mutant = "C", parameter = "centre", drawlist = list_of_draws){
first = match(first_mutant, mutants)
second = match(second_mutant, mutants)
first_mutant_draws <- drawlist[[parameter]][,first]
second_mutant_draws <- drawlist[[parameter]][,second]
outplot <- data.frame("difference" = first_mutant_draws - second_mutant_draws) %>%
ggplot()+
aes(x = difference)+
geom_density()
return(outplot)
}
difference_plot("A", "C")
difference_plot <- function(first_mutant = "A", second_mutant = "C", parameter = "centre", drawlist = list_of_draws){
first = match(first_mutant, mutants)
second = match(second_mutant, mutants)
first_mutant_draws <- drawlist[[parameter]][,first]
second_mutant_draws <- drawlist[[parameter]][,second]
outplot <- data.frame("difference" = first_mutant_draws - second_mutant_draws) %>%
ggplot()+
aes(x = difference)+
geom_density(size = 2, colour = "blue")
return(outplot)
}
difference_plot("E", "F")
difference_plot <- function(first_mutant = "A", second_mutant = "C", parameter = "centre", drawlist = list_of_draws){
first = match(first_mutant, mutants)
second = match(second_mutant, mutants)
first_mutant_draws <- drawlist[[parameter]][,first]
second_mutant_draws <- drawlist[[parameter]][,second]
outplot <- data.frame("difference" = first_mutant_draws - second_mutant_draws) %>%
ggplot()+
aes(x = difference)+
stat_density(geom = "line", colour = "blue")
return(outplot)
}
difference_plot("A", "C")
difference_plot("E", "F")
difference_plot <- function(first_mutant = "A", second_mutant = "C", parameter = "centre", drawlist = list_of_draws){
first = match(first_mutant, mutants)
second = match(second_mutant, mutants)
first_mutant_draws <- drawlist[[parameter]][,first]
second_mutant_draws <- drawlist[[parameter]][,second]
outplot <- data.frame("difference" = first_mutant_draws - second_mutant_draws) %>%
ggplot()+
aes(x = difference)+
stat_density(geom = "line", colour = "blue")+
labs(title = paste0("Distribution of differences within draws for mutants", first_mutant, " and ", second_mutant, " ", parameter, " values"))
return(outplot)
}
difference_plot("A", "C")
difference_plot <- function(first_mutant = "A", second_mutant = "C", parameter = "centre", drawlist = list_of_draws){
first = match(first_mutant, mutants)
second = match(second_mutant, mutants)
first_mutant_draws <- drawlist[[parameter]][,first]
second_mutant_draws <- drawlist[[parameter]][,second]
outplot <- data.frame("difference" = first_mutant_draws - second_mutant_draws) %>%
ggplot()+
aes(x = difference)+
stat_density(geom = "line", colour = "blue")+
labs(title = paste0("Distribution of differences within draws for mutants ", first_mutant, " and ", second_mutant, " ", parameter, " values"))
return(outplot)
}
difference_plot("A", "C")
difference_plot("A", "C")
difference_plot <- function(first_mutant = "A", second_mutant = "C", parameter = "centre", drawlist = list_of_draws){
first = match(first_mutant, mutants)
second = match(second_mutant, mutants)
first_mutant_draws <- drawlist[[parameter]][,first]
second_mutant_draws <- drawlist[[parameter]][,second]
outplot <- data.frame("difference" = first_mutant_draws - second_mutant_draws) %>%
ggplot()+
aes(x = difference)+
stat_density(geom = "line", colour = "blue")+
labs(title = paste0("Distribution of differences of mutants ", first_mutant, " and ", second_mutant, " ", parameter, " values: 4000 posterior draws"), xlab = "Difference")
return(outplot)
}
difference_plot("A", "C")
install.packages("blogdown")
getwd()
install.packages("Hugo")
library(rstan)
install.packages("rstan")
library(blogdown)
serve_site()
setwd("~/blog3/content/post")
serve_site()
servr::daemon_stop("127661800")
serve_site()
