[{"authors":null,"categories":null,"content":"Say we have a cohort of 500 first-year students commencing their second session of study. We decide to offer a special tutoring service to some of the students who did not go well in their first session. To do this, we arrange students in ascending order of their averaged first session final marks, and go down the list calling students and offering tutoring services until 50 students have taken up the offer. At the end of the second session, we want to see if this made a difference. The approach we will take is to simulate data to understand what kind of model is needed, and then fit it. Separately, we will do a power analysis to see what our prospects of being able to identify an effect are. Here we will consider a simple situation where all relevant variables have been taken into account, and the effect is therefore consistent for all students - if only real life were so simple!\nAlthough I am usually a devotee of the tidyverse, to keep things simple and focus on the procedure, I have used only base R in this post, and pretty much only used vectors - no data frames!\nSimulation\rStart with the basic parameters.\nset.seed(42)\rn_students \u0026lt;- 500\rn_tutoring \u0026lt;- 50\rGenerate a reasonable looking distribution of first-session marks. This should be bounded by zero and 100. One way to do this is to make the distribution in the log odds (logit) scale (which is unbounded), and then transform back to the marks scale. This will require functions for transforming to and from the logit scale.\ninvlogit \u0026lt;- function(x){1/(1+exp(-x))}\rlogit \u0026lt;- function(x){log(x/(1-x))}\rfirst_session_marks \u0026lt;- sort(100*invlogit(rnorm(n_students, logit(60/100), 0.7)))\rhist(first_session_marks)\rNow we start calling students to offer them tutoring, starting from those with the lowest first session marks. Strictly speaking, the simulation does not really need to mimic the reality to this level of detail, but I find that a more detailed simulation approach can often prove useful down the track, especially if the model becomes more complex. It also helps us to avoid making too many (overly-) simplifying assumptions. Here, the probability of a student accepting tutoring is 0.8 - first_session_mark/100, i.e. students with lower marks are more likely to accept tutoring.\nn_tutoring_places_accepted \u0026lt;- 0\rtutored \u0026lt;- rep(0, n_students)\ri \u0026lt;- 1\rwhile (n_tutoring_places_accepted \u0026lt; n_tutoring \u0026amp; i \u0026lt; n_students) {\rrval \u0026lt;- runif(1) if (rval \u0026lt; 0.8 - first_session_marks[i]/100){\rtutored[[i]] \u0026lt;- 1\rn_tutoring_places_accepted \u0026lt;- n_tutoring_places_accepted + 1\r}\ri \u0026lt;- i + 1\r}\rsum(tutored)\r## [1] 50\rNow we simulate second session marks. These should be tightly correlated to first session marks, and will be reasonably similar. In this model, we will include an intercept term that adds a small value to the first session mark, a slope term that scales the first session mark, and another interept term associated with tutoring. Realised values of the second session mark are then drawn from Gaussian distributions centred at these calculated mark values, with a defined standard deviation that is the same for all students. Thus, for student \\(i\\) we have:\n\\[\\text{Second session mark}_i \\sim \\text{Normal}(\\mu_i,\\sigma)\\\\ \\mu_i = \\beta_0 + \\beta_1\\text{first_session_mark}_i + \\beta_2\\text{Tutored}_i \\] Define the parameters, and generate the second session marks according to the model:\nbeta_0 \u0026lt;- 2\rbeta_1 \u0026lt;- 0.9\rbeta_2 \u0026lt;- 3\rsigma \u0026lt;- 5\rsecond_session_marks.mu \u0026lt;- beta_0 + beta_1*first_session_marks + beta_2*tutored\rsecond_session_marks \u0026lt;- rnorm(n_students, second_session_marks.mu, sigma)\rhist(second_session_marks)\rPlot the first and second session marks, coloured by whether tutoring was accepted.\ntutored.f \u0026lt;- factor(tutored, levels = c(0,1))\rplot(first_session_marks, second_session_marks, col = tutored.f)\rWe can see that the students who received tutoring have had a small but appreciable bump in their marks. To measure the bump in marks, we fit a regression model that looks just like the one used to create the data.\nregression_model \u0026lt;- lm(second_session_marks ~ 1 + first_session_marks + tutored)\rsummary(regression_model)\r## ## Call:\r## lm(formula = second_session_marks ~ 1 + first_session_marks + ## tutored)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -16.7165 -3.6281 0.1935 3.5529 17.6140 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 1.58472 1.12579 1.408 0.15986 ## first_session_marks 0.90359 0.01796 50.305 \u0026lt; 2e-16 ***\r## tutored 2.50125 0.89768 2.786 0.00553 ** ## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## Residual standard error: 5.147 on 497 degrees of freedom\r## Multiple R-squared: 0.8683, Adjusted R-squared: 0.8677 ## F-statistic: 1638 on 2 and 497 DF, p-value: \u0026lt; 2.2e-16\r The model has retrieved the simuation parameters quite nicely - no surprise, they are a lot less noisy than real data, all relevant variables have been included, and the effect size is appreciable and consistent.\n \rPower analysis by simulation\rA simplified version of the above simulation will be used to calculate the power by simulation. This uses a simpler model for which students receive tutoring - for the bottom 100 students, each has a 50% chance of accepting tutoring (up to a maximum of 50 tutoring places). We can use this to find the power for an estimated effect size, or to find the minimum effect size needed to achieve a given power. By replicating the above simulation thousands of times, we can quantify the fraction for which the p-value of the beta_3 coefficient was below the significance level.\npower_simulation \u0026lt;- function(n_tutored = 50, n_untutored = 450, beta3, sigma_secondsession, beta0 = 2, beta1 = 0.9){\rnstudents \u0026lt;- n_tutored + n_untutored first_session \u0026lt;- sort(100*invlogit(rnorm(nstudents, logit(60/100), 0.7))) second_session \u0026lt;- beta0 + beta1*first_session + rnorm(nstudents, 0, sigma_secondsession)\rtutored.indices \u0026lt;- sample(seq(1,n_tutored*2), n_tutored)\rtutored \u0026lt;- rep(0, nstudents)\rtutored[tutored.indices] \u0026lt;- 1\rsecond_session[tutored.indices] \u0026lt;- second_session[tutored.indices] + beta3\rlmod \u0026lt;- summary(lm(second_session ~ first_session + tutored))\rreturn(lmod$coefficients[3,4]) #The pvalue for the beta3 estimate.\r}\rpvals \u0026lt;- replicate(10000, power_simulation(n_tutored = 50, n_untutored = 450, beta3 = 2.4, sigma_secondsession = 5))\rmean(pvals \u0026lt;= 0.05)\r## [1] 0.7948\rSo, we have a calculated power of 0.7948. It is also interesting to look at the distribution of these p-values, in the logit scale.\nhist(logit(pvals),breaks = 50)\rabline(v = logit(0.05), col = \u0026quot;red\u0026quot;) #The vertical line is at p = 0.05\rWhy is the distribution shaped in this particular way? I don’t know - this is something I will need to read more about.\n \rConcluding remark\rGoing into a power analysis it is common to have a personal bias to thinking our effect size will be greater than it really is, and that the data are less noisy than they really are. Without going too much into the whys and wherefores of power analysis and null hypothesis significance testing, it is good practice to use a conservative estimate of the effect size based on external information (e.g. prior studies).\n \r","date":1536796800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536796800,"objectID":"d9cb7f2c3cc82abc9d3e37eb34d71942","permalink":"/post/outcomespost/","publishdate":"2018-09-13T00:00:00Z","relpermalink":"/post/outcomespost/","section":"post","summary":"Say we have a cohort of 500 first-year students commencing their second session of study. We decide to offer a special tutoring service to some of the students who did not go well in their first session. To do this, we arrange students in ascending order of their averaged first session final marks, and go down the list calling students and offering tutoring services until 50 students have taken up the offer.","tags":["regression","statistics","power analysis"],"title":"Quantifying an educational effect","type":"post"},{"authors":null,"categories":null,"content":"\rIn this example, inspired by a real-world problem (with details changed to protect future Nobel prize winners, so try not to read too much into it), several mutant strains of a species of bacteria have been exposed to a range of concentrations of Chemical X. Individual bacteria are exposed, and their response is to either turn green (success) or not. Intriguingly, if a lot of trials are measured of a range of concentrations for a single strain (mutant A, below), there is a bell curve-shaped rise and fall in successes as a function of concentration. Resources are insufficient to measure this many trials for each mutant, so 20 trials at each concentration for each mutant instead. However, some of these trials failed due to a technical glitch and the number of trials ranges from 10-20. Of particular interest is position of the centre of each strain’s Gaussian-shaped response curve.\nFor this problem, I will take the approach of fitting a model to the data that is based on an understanding of how the data were generated. This will be done using Bayesian inference, which goes a step further than simply finding a single set of most likely parameters, by finding the probability distribution for a wide range of possibile underlying paramters. For this, I use the probabilistic programming language Stan.\nModel\rFor each mutant, at each concentration, there is a certain number of trials and a certain number of successes. If the experiment were to be repeated many times, would we expect to get the exact same data every time? Of course not, but the numbers should be similar. The number of successes that are observed in any given experiment is stochastically drawn from some distribution. Our first task in defining the model is to identify the most appropriate distribution. In this case, the distribution that makes the most sense is the binomial distribution, which has two parameters: the number of trials, and the probability of success in each trial.\nFor each mutant at each concentration: the observed number of successes \\(Y\\) is drawn from a binomial distribution parameterised by the probability of success \\(p\\) and number of trials. The ~ symbol denotes a stochastic relationship.\n\\[Y \\sim \\text{Binomial(trials}\\text{, } p) \\]\nIn the second part of the model, the true success probability \\(p\\) for mutant \\(j\\) at concentration \\(x_i\\) is given by a Gaussian curve parameterised by the peak height \\(h_j\\) (in units of success probability), peak centre position \\(c_j\\) (in units of concentration), and its width (standard deviation) \\(\\sigma\\) (in units of concentration).\n\\[p_{j,i} = h_j \\text{ exp}{\\frac{-(x_i-c_j)^2}{2\\sigma_j^2}}\\]\nBayes’ Rule\rFor a given set of parameters, a range of observations can be obtained stochastically from the binomial distribution. The corrolary of this is that for a given set of observations, a range of underlying parameters could have created them. The above model can be used to calculate the likelihood of the observed data for any of a range of candidate parameter values. From this, the probability of any particular set of parameters having created the data can also be assessed. This is achieved using Bayes’ rule:\n\\[P(\\text{Parameters | Data}) = \\frac{P(\\text{Data | Parameters}).P(\\text{Parameters})}{P(\\text{Data})} \\] Where:\n\r\\(P(\\text{Parameters | Data})\\) is the posterior probability - if we can determine this for all parameters then we will know the probability distribution of all candidate parameters, given what the data at hand are telling us.\r\\(P(\\text{Data | Parameters})\\) is the likelihood. The above model is critical in calculating this - for a given set of parameters, how likely are the observed data to have been stochastically drawn from the distribution these parameters imply?\r\\(P(\\text{Parameters})\\) is the prior probability of the candidate parameters. This may have support from previous experiments, or it may have to represent an educated guess.\r\\(P(\\text{Data})\\) is the marginal likelihood, this can be thought of as the probability of observing the data over all possible parameters. It normalises the posterior probability, and can be calculated by integrating over all possible parameter values. Because it is not parameter-dependent, this value is the same no matter what the candidate parameters are. If we wish to compare the probabilities of two sets of parameters, we can take the ratio of their numerators from Bayes’ rule, and do not need the marginal likelihood.\r\r\rSampling\rHow can Bayes’ rule be applied to the above problem? For relatively simple problems, Bayes’ rule can be applied analytically, and an exact solution for the posterior probability distribution can be found. For more complicated problems like this one, a sampling approach is the only viable option. These methods build up a picture of what the posterior probability distribution looks like, one set of candidate parameters at a time. The challenge in sampling is to efficiently explore the posterior probability distribution.\nThere are several Markov Chain Monte Carlo (MCMC) sampling algorithms, including Gibbs sampling and Hamiltonian Monte Carlo, but the basic principles of these are pretty much as follows:\nSetup\n\rA prior probability distribution is specified for each parameter.\rA formula for the likelihood is specified.\rA random (or specified) set of parameters are taken as the initial candidate parameters\rThe number of sampling iterations is defined. Depending on the problem, the first several hundred or thousand of these will be discarded, as they have started at some random part of parameter space and have not yet equilibrated to the posterior distribution.\r\rSampling\nThe likelihood of obtaining the observed data given the candidate parameters is calculated and multiplied by the prior probability. This gives the numerator on the right hand side of Bayes’ formula.\rThe candidate set of parameters are either accepted or rejected, in some manner that is dependent on their probability.\rA new set of candidate parameters is generated by treating the last accepted set of parameters as a jumping off point. For example, a set of random numbers may be added to these.\r\rIn this way, the sampler explores each part of parameter space in proportion to its probability.\nHere’s a really great blog post by Thomas Wiecki that explains the whole process really nicely.\n\r\rSimulation\rA great way to proceed is by simulating data based on this model, and then fitting it with the corresponding regression model. In this way, we gain a deeper appreciation for how the model works, and can much more readily spot flaws in our thinking.\n# Give each mutant a name.\rn_mutants \u0026lt;- 6\rmutants \u0026lt;- LETTERS[1:n_mutants] # Population-level intercepts\rpop_height_logodds \u0026lt;- 0\rpop_centre \u0026lt;- 70\rpop_width \u0026lt;- 1.5 #Population scaling parameters\rgroup_scale_height_logodds \u0026lt;- 1\rgroup_scale_centre \u0026lt;- 4\rgroup_scale_width \u0026lt;- 0.5\r Random parameter draw\rTrue height and centre parameters for each mutant are now drawn from Gaussian distributions with the population centres and group standard deviations as given above. A random seed is specified to make this reproducible. The height values are in log-odds units, and are transformed to probability using the invlogit function. We can now make a table of the key parameters for each mutant. Note that mutants E and F have the same centre, while mutants B, C and E have the same height value.\n#invlogit function for converting log odds to probability\rinvlogit \u0026lt;- function(x){exp(x)/(1+exp(x))}\r#set random seed for reproducibility\rset.seed(100)\rheight_raw_logodds \u0026lt;- rnorm(n = n_mutants, mean = 0, sd = 1)\rcentre_raw \u0026lt;- rnorm(n = n_mutants, mean = 0, sd = 1)\rwidth_raw \u0026lt;- rnorm(n = n_mutants, mean = 0, sd = 1)\rmutant_height_logodds \u0026lt;- pop_height_logodds + group_scale_height_logodds * height_raw_logodds\rmutant_centre \u0026lt;- pop_centre + group_scale_centre * centre_raw\rmutant_width \u0026lt;- pop_width + group_scale_width * width_raw\r# Transform these parameters from log-odds to probability\rmutant_height_p \u0026lt;- invlogit(mutant_height_logodds)\r# Data summary\rmutant.frame \u0026lt;- data.frame(\u0026quot;mutant\u0026quot; = mutants, \u0026quot;height_logodds\u0026quot; = mutant_height_logodds, \u0026quot;height_p\u0026quot; = mutant_height_p,\r\u0026quot;centre\u0026quot; = mutant_centre, \u0026quot;width\u0026quot; = mutant_width)\rkable(mutant.frame, format = \u0026quot;html\u0026quot;, digits = 1)%\u0026gt;%\rkable_styling(bootstrap_options = c(\u0026quot;striped\u0026quot;, \u0026quot;hover\u0026quot;, \u0026quot;condensed\u0026quot;))\r\r\rmutant\r\rheight_logodds\r\rheight_p\r\rcentre\r\rwidth\r\r\r\r\r\rA\r\r-0.5\r\r0.4\r\r67.7\r\r1.4\r\r\r\rB\r\r0.1\r\r0.5\r\r72.9\r\r1.9\r\r\r\rC\r\r-0.1\r\r0.5\r\r66.7\r\r1.6\r\r\r\rD\r\r0.9\r\r0.7\r\r68.6\r\r1.5\r\r\r\rE\r\r0.1\r\r0.5\r\r70.4\r\r1.3\r\r\r\rF\r\r0.3\r\r0.6\r\r70.4\r\r1.8\r\r\r\r\r \rPredictor variable and number of trials\r# Predictor variable\rconc_range \u0026lt;- 10\rconc_interval \u0026lt;- 1\rconc \u0026lt;- seq(pop_centre-conc_range, pop_centre + conc_range, conc_interval)\r# Maximum number of repeats/trials\rmax_trials = 10\r#Probability of max trials\rprob_trials = 0.95 #A high value to simulate a situation where there is an intended number of trials, but some have failed for technical reasons.\r \rProbability of success\rThe Gaussian function is defined and a probability matrix describing the probability of success for each mutant at each tested concentration is calculated, given the parameters height, centre, and width for each mutant.\ngaussian \u0026lt;- function(height,centre,width,x){\rreturn(height * exp(-0.5* ( ((x - centre)^2)/(width^2)) ))\r}\rprobability.matrix \u0026lt;- matrix(data = NA, nrow = length(conc), ncol = n_mutants, dimnames = list(conc, mutants))\rfor (j in 1:n_mutants){\rfor (i in 1:length(conc)){\rprobability.matrix[i,j] \u0026lt;- gaussian(mutant_height_p[j], mutant_centre[j], mutant_width[j], conc[i])\r}\r}\r\rExperiment simulation\rFor each mutant, at each concentration, the number of trials can vary. Here this is achieved by drawing the number of trials from a binomial distribution (to simulate random technical failures), but that is not crucial to the model.\nAn experiment is now simulated by drawing from a binomial distribution for each mutant-concentration combination, parameterised the corresponding values from the probabilities matrix and number of trials matrix.\nn_trials.matrix \u0026lt;- matrix(data = rbinom(n = length(conc)*n_mutants, size = max_trials, prob = prob_trials), nrow = length(conc), ncol = n_mutants, dimnames = list(conc, mutants))\r# Simulate experiments - get the number of successes given the probability from the above matrix and the number of trials.\rsuccesses.matrix \u0026lt;- matrix(data = NA, nrow = length(conc), ncol = n_mutants, dimnames = list(conc, mutants))\rfor (j in 1:n_mutants){\rfor (i in 1:length(conc)){\rsuccesses.matrix[i,j] \u0026lt;- rbinom(1, prob = probability.matrix[i,j], size = n_trials.matrix[i,j])\r}\r}\r \rReshape data\rWe now make use of the tidyverse set of packages. Data are reformatted from a wide format in which each mutant has its own column to tidy format, which is easier to work with. In this long table format we have a single column to specify the mutant, and single columns for concentration, number of trials and number of successes. For convenience, we also tack on columns with the true mutant parameters (these values are simply repeated in each row for the same mutant). If you look at the ggplot function below, you will see the advantage that tidy format confers - we can now describe the plot for all mutants at once, rather than having to add layers for each mutant.\nlibrary(reshape2)\r# Use the melt function from reshape2, this is similar to tidyr\u0026#39;s gather, but it also works on matrices and arrays.\r# This converts data from wide to long format.\rn_trials.frame \u0026lt;- melt(n_trials.matrix)\rcolnames(n_trials.frame) \u0026lt;- c(\u0026quot;conc\u0026quot;, \u0026quot;mutant\u0026quot;, \u0026quot;n_trials\u0026quot;)\rprob.frame \u0026lt;- melt(probability.matrix)\rcolnames(prob.frame) \u0026lt;- c(\u0026quot;conc\u0026quot;, \u0026quot;mutant\u0026quot;, \u0026quot;probability\u0026quot;)\rsuccesses.frame \u0026lt;- melt(successes.matrix)\rcolnames(successes.frame) \u0026lt;- c(\u0026quot;conc\u0026quot;, \u0026quot;mutant\u0026quot;, \u0026quot;successes\u0026quot;)\rdetach(package:reshape2)\r# Combine\rexperiment_data \u0026lt;- left_join(successes.frame, n_trials.frame) %\u0026gt;%\rleft_join(prob.frame) %\u0026gt;%\rleft_join(mutant.frame)\r#Trim away the zero readings.\rexperiment_data \u0026lt;- experiment_data %\u0026gt;%\rfilter(conc \u0026gt; centre - 4*width \u0026amp; conc \u0026lt; centre + 4*width)\r And this is how our simulated measurements look:\n# Plot\rggplot(experiment_data)+\raes(x = conc, y = successes/n_trials, group = mutant)+\rgeom_vline(data = mutant.frame, aes(xintercept = centre), linetype = \u0026quot;dashed\u0026quot;)+\rgeom_line(aes(y = n_trials/max_trials), linetype = \u0026quot;dashed\u0026quot;, colour = \u0026quot;grey\u0026quot;)+\rgeom_line(aes(y = probability), colour = \u0026quot;blue\u0026quot;)+\rgeom_point(size = 1)+\rtheme_bw(14)+\rfacet_wrap(~mutant,ncol=2)+\rlabs(x = \u0026quot;Concentration\u0026quot;, caption = paste0(\u0026quot;Horizontal dashed line represents number of trials as fraction of maximum trials (\u0026quot;, max_trials, \u0026quot;).\\nVertical dashed line shows the true centre.\\nBlue curve shows the true probability.\u0026quot;))\r  \r\rStan model\rHere I use the tidy format data as the input. The mutants are named by an index rather than letter. All input data must be packaged together in a list.\nmlist \u0026lt;- data.frame(\u0026quot;mutant\u0026quot; = mutants, mutant_num = seq(1:n_mutants))\rexperiment_data \u0026lt;- experiment_data %\u0026gt;% left_join(mlist)\rdat_allmutants = list(\rJ = n_mutants,\rN = nrow(experiment_data),\rmutant = experiment_data$mutant_num,\rx = experiment_data$conc,\rn_trials = experiment_data$n_trials,\ry = experiment_data$successes\r)\r The stan model is stored in a separate .stan file, however, it is also possible to provide it as a string. It is split into blocks as follows, shown individually for convenience. See the Stan manual for more information.\nData block\rdata {\rint\u0026lt;lower=1\u0026gt; J; //number of mutants\rint\u0026lt;lower=1\u0026gt; N; //Number of observations\rint\u0026lt;lower=1,upper=J\u0026gt; mutant[N]; //mutant for observation n\rvector[N] x; //concentration for observation n\rint\u0026lt;lower=0\u0026gt; n_trials[N]; //number of trials for observation n\rint\u0026lt;lower=0\u0026gt; y[N]; //Number of survivors for observation n\r}\r\rValues in the data block should match what we have put in our data list. The choice of type for each variable in the data block is crucial, and the Stan manual is very helpful in this area.\n\rParameters block\rparameters {\rreal mu_centre;\rreal\u0026lt;lower=0\u0026gt; sigma_centre;\rvector[J] centre_raw;\rreal mu_heightlogodds;\rreal\u0026lt;lower=0\u0026gt; sigma_heightlogodds;\rvector[J] heightlogodds_raw;\rreal\u0026lt;lower=0\u0026gt; mu_width_squared;\rreal\u0026lt;lower=0\u0026gt; sigma_width_squared;\rvector[J] width_raw_squared;\r}\rThese are the parameters to be estimated by the regression fit. The parameters for each mutant are loosely treated as coming from common distributions. A population centre value is estimated, along with a scaling value. Individual mutant deviations are then drawn from centred unit normals. The mutant parameter is then given in the transformed parameters block as the mutant deviation times the scaling factor plus the population centre value. This is the non-centred parameterisation, which helps to avoid sampling problems when there are only a few members in the group. By contrast, in the centred parameterisation, individual mutant parameters would be drawn directly from a distribution with an estimated population centre and standard deviation.\nNote that because the width parameter only appears as its square in the gaussian formula, it is simplified to width_squared here.\n\rTransformed parameters block\rtransformed parameters {\rvector[J] height;\rvector[J] centre;\rvector[J] heightlogodds;\rvector\u0026lt;lower=0\u0026gt;[J] width_squared;\rcentre = mu_centre + sigma_centre*centre_raw;\rheightlogodds = mu_heightlogodds + sigma_heightlogodds * heightlogodds_raw;\rheight = inv_logit(heightlogodds);\rwidth_squared = mu_width_squared + sigma_width_squared * width_raw_squared;\r}\rHere, individual centre, height and width_squared values for each mutant are calculated as the population centre value plus the individual mutant’s deviation times the scaling factor.\n\rModel block\rmodel {\rvector[N] psurvive;\rfor (n in 1:N)\rpsurvive[n] = height[mutant[n]] * exp( -0.5* ( ((x[n] - centre[mutant[n]])^2) / (width_squared[mutant[n]]) ) );\rmu_centre ~ normal(65,20); sigma_centre ~ cauchy(0,10);\rcentre_raw ~ normal(0,1);\rmu_heightlogodds ~ normal(0.5,2);\rsigma_heightlogodds ~ cauchy(0,2);\rheightlogodds_raw ~ normal(0,1);\rmu_width_squared ~ cauchy(0,5);\rsigma_width_squared ~ cauchy(0,3);\rwidth_raw_squared ~ normal(0,1);\ry ~ binomial(n_trials, psurvive);\r}\rPrior probability distributions are specified for each parameter, as well as the likelihood. The likelihood is given by ‘y ~ binomial(n_trials, psurvive)’ in conjunction with the loop that gives psurvive values at each mutant/concentration combination.\n\rGenerated quantities block\rgenerated quantities {\rvector\u0026lt;lower=0\u0026gt;[J] width;\rwidth = sqrt(width_squared);\r}\rHere, the width is output as the square root of the width_squared parameter. This, along with anything else that we might put in this block, is output purely for convenience, and is not part of the fitting process.\n  \rRun the model\rIn this case, the model is very fast. The slowest parts are compiling the model, and finding initial values that do not conflict with the parameter restrictions (e.g. non-negative values of width_squared). But it still only takes about 20 seconds in total, including 4.5 seconds of actual sampling. If this had been too much of a problem, it is possible to specify initial values (different values must be supplied to each chain). In my experience, having two or three grouping variables and \\(10^4\\)-\\(10^5\\) observations means that the model could take hours or tens of hours to fit.\npost_warmup \u0026lt;- 2000\rwarmup_draws \u0026lt;- 1000\rn_chains \u0026lt;- 4\rfit \u0026lt;- stan(file = \u0026quot;mutant_model.stan\u0026quot;, model_name = \u0026quot;example\u0026quot;,\rdata = dat_allmutants, iter = post_warmup + warmup_draws, warmup = warmup_draws, chains = n_chains, cores = 4,\rverbose = FALSE)\r I am not going to devote the space here to investigating how well the model ran - convergence etc., but I will recommend that Shinystan is an excellent package for exploring these issues.\nlibrary(shinystan)\rlaunch_shinystan(fit)\r The mutant centre values have turned out quite reasonable.\nplot(fit, pars = \u0026quot;centre\u0026quot;)\rMost pairs of mutants are distinct, however, some are overlapping. We will need to delve further into the posterior draws to assess these.\n  \r\rPosterior draws\rExtract some example posterior draws (note that these start from the first post-warmup draw) and calculate the corresponding probability curves given by the parameters in each draw. To get nice looking curves we will sample concentrations at finer intervals than we did in our experiment. Note that the package Bayesplot can do all of this (including supplying a custom function of the parameters, such as the gaussian), but for the sake of learning I have gone through this manually.\nn_draws \u0026lt;- 200\rdraws \u0026lt;- paste0(\u0026quot;draw_\u0026quot;, 1:n_draws)\rlist_of_draws \u0026lt;- extract(fit, pars = c(\u0026quot;centre\u0026quot;, \u0026quot;height\u0026quot;, \u0026quot;width\u0026quot;))\rcentrevals \u0026lt;- as.data.frame(list_of_draws$centre[1:n_draws,])\rcolnames(centrevals) \u0026lt;- mutants\rwidthvals \u0026lt;- as.data.frame(list_of_draws$width[1:n_draws,])\rcolnames(widthvals) \u0026lt;- mutants\rheightvals \u0026lt;- as.data.frame(list_of_draws$height[1:n_draws,])\rcolnames(heightvals) \u0026lt;- mutants\rconc_detailed \u0026lt;- seq(60,80,0.1)\r#Create a 3D array of draw-mutant-concentration, filled with the probability of success.\rcurves \u0026lt;- array(NA, dim=c(n_draws, n_mutants, length(conc_detailed)), dimnames = list(draws, mutants, conc_detailed))\rfor (i in 1:n_draws){\rfor (j in 1:n_mutants){\rfor (k in 1:length(conc_detailed)){\rcurves[i,j,k] \u0026lt;- gaussian(height = heightvals[i,j], centre = centrevals[i,j], width = widthvals[i,j], x = conc_detailed[k]) }\r}\r}\r#Turn the array into a data frame in tidy format - the fastest way is to use the melt function from reshape2 (unfortunately tidyr\u0026#39;s \u0026#39;gather\u0026#39; does not work on arrays)\rlibrary(reshape2)\rcurves_c \u0026lt;- melt(curves)\rdetach(package:reshape2)\rcolnames(curves_c) \u0026lt;- c(\u0026quot;draw\u0026quot;, \u0026quot;mutant\u0026quot;, \u0026quot;conc\u0026quot;, \u0026quot;prob\u0026quot;)\r Here are some functions to plot the posterior draws.\n# A function from stack exchange by akrun that gives comma separated lists, with an \u0026#39;and\u0026#39; before the final item.\rfPaste \u0026lt;- function(vec) sub(\u0026quot;,\\\\s+([^,]+)$\u0026quot;, \u0026quot; and \\\\1\u0026quot;, toString(vec)) # A function to plot some draws in separate facets\rcompare_mutants_plot \u0026lt;- function(mutantlist, draws_to_plot=12, centre_draws = centrevals, curvedata = curves_c){\rcentrepositions \u0026lt;- centre_draws[1:draws_to_plot,] %\u0026gt;%\rmutate(draw = draws[1:draws_to_plot]) %\u0026gt;%\rgather(mutant, centre,-draw)\routplot \u0026lt;- curvedata %\u0026gt;%\rfilter(mutant %in% mutantlist) %\u0026gt;%\rfilter(draw %in% draws[1:draws_to_plot]) %\u0026gt;%\rggplot()+\raes(x = conc, y = prob, group = mutant, colour = mutant)+\rgeom_line()+\rgeom_vline(data = centrepositions %\u0026gt;% filter(mutant %in% mutantlist), aes(xintercept = centre, colour = mutant))+\rfacet_wrap(~draw)+\rscale_colour_manual(values = c(\u0026quot;blue\u0026quot;, \u0026quot;darkorange\u0026quot;))+\rlabs(title = paste0(\u0026quot;Fitted curves for mutants \u0026quot;, fPaste(mutantlist), \u0026quot;: \u0026quot;, draws_to_plot, \u0026quot; posterior draws\u0026quot;),\rx = \u0026quot;Concentration\u0026quot;, y = \u0026quot;Probability of success\u0026quot;)+\rtheme(legend.position = \u0026quot;bottom\u0026quot;)\rreturn(outplot)\r}\r# A function to overlay many draws\roverlay_mutants_plot \u0026lt;- function(mutantlist, draws_to_plot=200, curvedata = curves_c){\routplot \u0026lt;- curvedata %\u0026gt;%\rfilter(mutant %in% mutantlist) %\u0026gt;%\rggplot()+\raes(x = conc, y = prob, group = interaction(mutant, draw), colour = mutant)+\rgeom_line(alpha = 0.3)+\rscale_colour_manual(values = c(\u0026quot;blue\u0026quot;, \u0026quot;darkorange\u0026quot;))+\rlabs(title = paste0(\u0026quot;Fitted curves for mutants \u0026quot;, fPaste(mutantlist), \u0026quot;: \u0026quot;, draws_to_plot, \u0026quot; posterior draws\u0026quot;), x = \u0026quot;Concentration\u0026quot;, y = \u0026quot;Probability of success\u0026quot;)+\rtheme(legend.position = \u0026quot;bottom\u0026quot;)\rreturn(outplot)\r}\r# A function to plot the distribution of differences between centre values\rdifference_plot \u0026lt;- function(first_mutant = \u0026quot;A\u0026quot;, second_mutant = \u0026quot;C\u0026quot;, parameter = \u0026quot;centre\u0026quot;, drawlist = list_of_draws){\rfirst = match(first_mutant, mutants)\rsecond = match(second_mutant, mutants)\rfirst_mutant_draws \u0026lt;- drawlist[[parameter]][,first]\rsecond_mutant_draws \u0026lt;- drawlist[[parameter]][,second]\routplot \u0026lt;- data.frame(\u0026quot;difference\u0026quot; = first_mutant_draws - second_mutant_draws) %\u0026gt;%\rggplot()+\raes(x = difference)+\rstat_density(geom = \u0026quot;line\u0026quot;, colour = \u0026quot;blue\u0026quot;)+\rlabs(title = paste0(\u0026quot;Distribution of differences of mutants \u0026quot;, first_mutant, \u0026quot; and \u0026quot;, second_mutant, \u0026quot; \u0026quot;, parameter, \u0026quot; values: \u0026quot;, post_warmup*n_chains, \u0026quot; posterior draws\u0026quot;), x = \u0026quot;Difference\u0026quot;)\rreturn(outplot)\r}\r Mutants A and C\rNotably, from the plot above we can see that mutants A and C have partially overlapping distributions. Does this mean our model is implying that A and C could possibly share the same (or a very very close) value for centre? Not necessarily - to be able to make a statement about this we need to make comparisons within draws only. Let’s get a quick idea of how these look:\ncompare_mutants_plot(c(\u0026quot;A\u0026quot;, \u0026quot;C\u0026quot;), 12)\rBut that was just a few draws, here are many more:\noverlay_mutants_plot(c(\u0026quot;A\u0026quot;, \u0026quot;C\u0026quot;))\rBut this is still only a subset of the draws. We have done thousands more post-warmup draws, let’s compare across all of them. Mutant A appears to have a slightly higher peak centre value. In what fraction of draws is the peak centre of mutant A at a higher concentration than the peak centre of mutant C?\ncentre_a.all \u0026lt;- list_of_draws$centre[,1]\rcentre_c.all \u0026lt;- list_of_draws$centre[,3]\rsum(centre_a.all \u0026gt; centre_c.all)/length(centre_a.all)\r## [1] 0.97125\r97.1% of them. So, while we can see that they have very close centre values, mutant A probably has a greater centre value than mutant C. Indeed, we know that the true centre value for mutant A is 1.0 concentration units greater than that of C. We can go one better still, and plot the distribution of their differences in all draws.\ndifference_plot(\u0026quot;A\u0026quot;, \u0026quot;C\u0026quot;)\rThe median difference is 0.9, a slight underestimate. Looking at the experimental data, there is one concentration point for mutant A to the left of its peak centre value at which an unusually high number of trials were successful, given the underlying probability. This would have the effect of dragging the estimated peak centre to the left. So we are within a regime where we get pretty good estimates, but are of course subject to stochasticity and a bit more data would help. The important point here is that we now have in hand a probability distribution for the difference between these values, rather than a single maximum likelihood estimation, which given the stochastic relationship between paramaters and observations is vastly preferable.\n \rMutants E and F\rWhat about mutants E and F? The distributions for their centre values are entirely overlapping, and we know that their true centre values are identical.\ncompare_mutants_plot(c(\u0026quot;E\u0026quot;, \u0026quot;F\u0026quot;), 12)\roverlay_mutants_plot(c(\u0026quot;E\u0026quot;, \u0026quot;F\u0026quot;))\rIn what fraction of draws is the peak centre of mutant F at a lower concentration than the peak centre of mutant E?\ncentre_e.all \u0026lt;- list_of_draws$centre[,5]\rcentre_f.all \u0026lt;- list_of_draws$centre[,6]\rsum(centre_f.all \u0026lt; centre_e.all)/length(centre_f.all)\r## [1] 0.439125\rMutant F, which is has a true peak centre identical to mutant E was lower than mutant E in approximately half of the draws, so we would not say that there is evidence they differ.\ndifference_plot(\u0026quot;E\u0026quot;, \u0026quot;F\u0026quot;)\r So, the numbers are reasonable and the model is looking good, it did a good job with the simulated data. The next step would be to fit it to the actual experimental data.\n  \r\r","date":1535328000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535328000,"objectID":"6e2269ee256c719048cd62dc58b91a04","permalink":"/post/post_1/","publishdate":"2018-08-27T00:00:00Z","relpermalink":"/post/post_1/","section":"post","summary":"In this example, inspired by a real-world problem (with details changed to protect future Nobel prize winners, so try not to read too much into it), several mutant strains of a species of bacteria have been exposed to a range of concentrations of Chemical X. Individual bacteria are exposed, and their response is to either turn green (success) or not. Intriguingly, if a lot of trials are measured of a range of concentrations for a single strain (mutant A, below), there is a bell curve-shaped rise and fall in successes as a function of concentration.","tags":["Stan","regression"],"title":"Simulation and Modelling in R and Stan","type":"post"},{"authors":["Flynn R. Hill","Antoine M. van Oijen","Karl E. Duderstadt"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1514725200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514725200,"objectID":"3db086e4c4c0a7058072e871b1b23b44","permalink":"/publication/change-points/","publishdate":"2018-01-01T00:00:00+11:00","relpermalink":"/publication/change-points/","section":"publication","summary":"Single-molecule approaches present a powerful way to obtain detailed kinetic information at the molecular level. However, the identification of small rate changes is often hindered by the considerable noise present in such single-molecule kinetic data. We present a general method to detect such kinetic change points in trajectories of motion of processive single molecules having Gaussian noise, with a minimum number of parameters and without the need of an assumed kinetic model beyond piece-wise linearity of motion. Kinetic change points are detected using a likelihood ratio test in which the probability of no change is compared to the probability of a change occurring, given the experimental noise. A predetermined confidence interval minimizes the occurrence of false detections. Applying the method recursively to all sub-regions of a single molecule trajectory ensures that all kinetic change points are located. The algorithm presented allows rigorous and quantitative determination of kinetic change points in noisy single molecule observations without the need for filtering or binning, which reduce temporal resolution and obscure dynamics. The statistical framework for the approach and implementation details are discussed. The detection power of the algorithm is assessed using simulations with both single kinetic changes and multiple kinetic changes that typically arise in observations of single-molecule DNA-replication reactions. Implementations of the algorithm are provided in ImageJ plugin format written in Java and in the Julia language for numeric computing, with accompanying Jupyter Notebooks to allow reproduction of the analysis presented here.","tags":[],"title":"Detection of kinetic change points in piece-wise linear single molecule motion","type":"publication"}]